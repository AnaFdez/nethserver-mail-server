#!/usr/bin/perl

#
# nethserver-mail-sync-ldap
#
# Keep synchronized pseudonyms and ldap mail attribute
#

#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use esmith::AccountsDB;
use NethServer::Directory;
use NethServer::MailServer;
use strict;

my $event = shift || die("Missing event name argument");
my $accountsDb = esmith::AccountsDB->open() || die('Could not open AccountsDB');
my $nsDirectory = NethServer::Directory->new();
my $mailServer = NethServer::MailServer->new();

my $pseudonym = shift;
my $pseudonymRecord = $accountsDb->get($pseudonym);


if (! defined $pseudonymRecord || $pseudonymRecord->prop('type') !~ /^pseudonym(-deleted)?$/) {
    die('Invalid pseudonym record: ' . $pseudonym);
}

my $account = $pseudonymRecord->prop('Account');
    
if( ! $account ) {
    warn('Missing Account relation in pseudonym record ' . $pseudonym . "... skipped.\n");
    exit(0);
}
    
my @addressList = $mailServer->getAccountMailAddresses($account);
my $ldapEntry = $nsDirectory->getUser($account);

# Update the LDAP entry with the new address list:
if($ldapEntry) {
    if(@addressList) {
	$ldapEntry->replace(mail => \@addressList);    
    } else {
	$ldapEntry->replace(mail => '');
    }
    $ldapEntry->update($nsDirectory);
}

# Update the previously related Account in the same manner:
my $prevAccount = $pseudonymRecord->prop('_prevAccount');
if($prevAccount && $prevAccount ne $account) {
    my $prevAccountEntry = $nsDirectory->getUser($prevAccount);
    if($prevAccountEntry) {
	my @prevAddressList = @{$prevAccountEntry->get_value('mail', asref => 1)};

	# remove the pseudonym from the previous account mail attribute:
	@prevAddressList = grep { $_ ne $pseudonym } @prevAddressList;

	# warn "Setting $prevAccount address list: " . join(', ', @prevAddressList) . "\n";

	if(@prevAddressList) {
	    $prevAccountEntry->replace(mail => \@prevAddressList);
	} else {
	    $prevAccountEntry->replace(mail => '');
	}
	$prevAccountEntry->update($nsDirectory);
    }


    # Store the Account value for future changes:
    $accountsDb->set_prop($pseudonym, '_prevAccount', $account);
}


exit 0;
