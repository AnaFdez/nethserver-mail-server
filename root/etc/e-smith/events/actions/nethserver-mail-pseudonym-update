#!/usr/bin/perl

#
# nethserver-mail-sync-ldap
#
# Keep synchronized pseudonyms and ldap mail attribute
#

use esmith::AccountsDB;
use NethServer::Directory;
use strict;

my $event = shift || die("Missing event name argument");
my $accountsDb = esmith::AccountsDB->open() || die('Could not open AccountsDB');
my $nsDirectory = NethServer::Directory->new();


my $pseudonym = shift;
my $pseudonymRecord = $accountsDb->get($pseudonym);

if (! defined $pseudonymRecord || $pseudonymRecord->prop('type') !~ /^pseudonym(-deleted)?$/) {
    die('Invalid pseudonym record: ' . $pseudonym);
}

my $account = $pseudonymRecord->prop('Account');
    
if( ! $account ) {
    die('Missing Account value in pseudonym record ' . $pseudonym);
}
    

my @addressList = ();    
    
    
# Find all pseudonyms for Account:    
foreach ($accountsDb->pseudonyms()) {
    if($_->prop('Account') eq $account) {
	push @addressList, $_->key();
    } 
}

my $ldapEntry = $nsDirectory->getUser($account);

# Update the LDAP entry with the new address list:
if($ldapEntry) {
    if(@addressList) {
	$ldapEntry->replace(mail => \@addressList);    
    } else {
	$ldapEntry->replace(mail => '');
    }
    $ldapEntry->update($nsDirectory);
}

# Update the previously related Account in the same manner:
my $prevAccount = $pseudonymRecord->prop('_prevAccount');
if($prevAccount && $prevAccount ne $account) {
    my $prevAccountEntry = $nsDirectory->getUser($prevAccount);
    if($prevAccountEntry) {
	my @prevAddressList = @{$prevAccountEntry->get_value('mail', asref => 1)};

	# remove the pseudonym from the previous account mail attribute:
	@prevAddressList = grep { $_ ne $pseudonym } @prevAddressList;

	if(@prevAddressList) {
	    $prevAccountEntry->replace(mail => \@prevAddressList);
	} else {
	    $prevAccountEntry->replace(mail => '');
	}

    }

    # Store the Account value for future changes:
    $accountsDb->set_prop($pseudonym, '_prevAccount', $account);
}


exit 0;
