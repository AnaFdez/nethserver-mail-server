#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;

use NethServer::Migrate 'migrateDir';
use User::pwent;
use esmith::AccountsDB;
use File::Path;
use File::Temp;

my $event = shift;
my $sourceDir = shift;
my $errors = 0;

my $accountsDb = esmith::AccountsDB->open() or die("Could not open destination account db\n");


#
# Migrate admin and user mailboxes
#
foreach my $userName ('admin', map { $_->key } $accountsDb->users()) {

    my $srcMaildir;
    my $dstMaildir = '/var/lib/nethserver/vmail/' . $userName . '/Maildir';
    my $accountRecord;
    my $cleanupMaildir = 0;

    if($userName eq 'admin') {
	$srcMaildir = $sourceDir . '/home/e-smith/Maildir';
	$cleanupMaildir = 0;
    } else {
	my $pwuser = getpwnam($userName);

	if( ! $pwuser) {
	    warn "[ERROR] $userName skipped: not found in passwd database\n";
	    $errors ++;
	    next;
	}

	$srcMaildir = $pwuser->dir . '/Maildir';
	$cleanupMaildir = 1;
	$accountRecord = $accountsDb->get($userName);
    }

    if( ! -d $srcMaildir) {
	warn "[WARNING] User $userName skipped: could not find source directory $srcMaildir\n";
	next;
    }

    if( ! -d $dstMaildir) {
	File::Path::make_path($dstMaildir, {mode => 0700, user => 'vmail', group => 'vmail'});
    }

    #
    # Migrate maildir only if MailStatus is enabled or the user is "admin":
    #
    if($userName eq 'admin' || (defined $accountRecord->prop('MailStatus') 
       && $accountRecord->prop('MailStatus') eq 'enabled')) {
	migrateDir($srcMaildir, $dstMaildir);
       
	#
	# Set vmail ownership:
	#
	system(qw(chown -R vmail.vmail), $dstMaildir);
	if($? != 0) {
	    warn "[ERROR] Failed to change ownership of files in $dstMaildir\n";
	    $errors ++
	}

	#
	# Fix permissions
	#
	system(qw(chmod -R g-rwxXst,o=g), $dstMaildir);
	if($? != 0) {
	    warn "[WARNING] Failed to clean up permissions of files in $dstMaildir\n";
	}

	#
	# Cleanup POSIX acls in destination Maildir/
	#
	system(qw(/usr/bin/setfacl --remove-all --recursive), $dstMaildir);
	if($? != 0) {
	    warn "[WARNING] Failed to clean up POSIX acls of files in $dstMaildir\n";
	}

	#
	# Remove empty Maildir/ in user's home directory 
	#
	if($cleanupMaildir) {
	    rmdir $srcMaildir;
	}
    }

}


if($errors > 0) {
    warn "[WARNING] $errors error(s) occurred in $0 action\n";
    exit(1);
}

# action ends:
exit(0);

